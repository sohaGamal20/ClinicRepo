// <auto-generated />
using System;
using ClinicDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClinicDB.Migrations
{
    [DbContext(typeof(ContextDB))]
    [Migration("20230304215050_AddUserTable")]
    partial class AddUserTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Infra.Clinic.Entity.ClinicUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Row_Version");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClinicUser", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DisplayName = "Dr. Wafaa",
                            Password = "Wafaa",
                            UserName = "Wafaa"
                        },
                        new
                        {
                            Id = 2L,
                            DisplayName = "User",
                            Password = "User",
                            UserName = "User"
                        });
                });

            modelBuilder.Entity("Infra.Clinic.Entity.Diagnosis", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PatientID")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Row_Version");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientID");

                    b.ToTable("Diagnosis", (string)null);
                });

            modelBuilder.Entity("Infra.Clinic.Entity.DiagnosisLeafNodes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CombinedField")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("[Code] +' : '+[Title]");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("DiagnosisSubCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Row_Version");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisSubCategoryId");

                    b.ToTable("DiagnosisLeafNodes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "E00.0",
                            DiagnosisSubCategoryId = 1L,
                            Title = "Congenital iodine-deficiency syndrome, neurological type"
                        },
                        new
                        {
                            Id = 2L,
                            Code = "E00.1",
                            DiagnosisSubCategoryId = 1L,
                            Title = "Congenital iodine-deficiency syndrome, myxedematous type"
                        },
                        new
                        {
                            Id = 3L,
                            Code = "E00.2",
                            DiagnosisSubCategoryId = 1L,
                            Title = "Congenital iodine-deficiency syndrome, mixed type"
                        },
                        new
                        {
                            Id = 4L,
                            Code = "E00.9",
                            DiagnosisSubCategoryId = 1L,
                            Title = "Congenital iodine-deficiency syndrome, unspecified"
                        },
                        new
                        {
                            Id = 5L,
                            Code = "E01.0",
                            DiagnosisSubCategoryId = 2L,
                            Title = "Iodine - deficiency related diffuse(endemic) goiter"
                        },
                        new
                        {
                            Id = 6L,
                            Code = "E01.1",
                            DiagnosisSubCategoryId = 2L,
                            Title = "Iodine - deficiency related multinodular(endemic) goiter"
                        },
                        new
                        {
                            Id = 7L,
                            Code = "E01.2",
                            DiagnosisSubCategoryId = 2L,
                            Title = "Iodine - deficiency related(endemic) goiter, unspecified"
                        },
                        new
                        {
                            Id = 8L,
                            Code = "E01.8",
                            DiagnosisSubCategoryId = 2L,
                            Title = "Other iodine-deficiency related thyroid disorders and allied conditions"
                        },
                        new
                        {
                            Id = 9L,
                            Code = "E03.0",
                            DiagnosisSubCategoryId = 4L,
                            Title = "Congenital hypothyroidism with diffuse goiter"
                        },
                        new
                        {
                            Id = 10L,
                            Code = "E03.1",
                            DiagnosisSubCategoryId = 4L,
                            Title = "Congenital hypothyroidism without goiter"
                        },
                        new
                        {
                            Id = 11L,
                            Code = "E03.2",
                            DiagnosisSubCategoryId = 4L,
                            Title = "Hypothyroidism due to medicaments and other exogenous substances"
                        },
                        new
                        {
                            Id = 12L,
                            Code = "E03.3",
                            DiagnosisSubCategoryId = 4L,
                            Title = "Postinfectious hypothyroidism"
                        },
                        new
                        {
                            Id = 13L,
                            Code = "E03.4",
                            DiagnosisSubCategoryId = 4L,
                            Title = "Atrophy of thyroid(acquired)"
                        },
                        new
                        {
                            Id = 14L,
                            Code = "E03.5",
                            DiagnosisSubCategoryId = 4L,
                            Title = "Myxedema coma"
                        },
                        new
                        {
                            Id = 15L,
                            Code = "E03.8",
                            DiagnosisSubCategoryId = 4L,
                            Title = "Other specified hypothyroidism"
                        },
                        new
                        {
                            Id = 16L,
                            Code = "E03.9",
                            DiagnosisSubCategoryId = 4L,
                            Title = "Hypothyroidism, unspecified"
                        },
                        new
                        {
                            Id = 17L,
                            Code = "E04.0",
                            DiagnosisSubCategoryId = 5L,
                            Title = "Nontoxic diffuse goiter"
                        },
                        new
                        {
                            Id = 18L,
                            Code = "E04.1",
                            DiagnosisSubCategoryId = 5L,
                            Title = "Nontoxic single thyroid nodule"
                        },
                        new
                        {
                            Id = 19L,
                            Code = "E04.2",
                            DiagnosisSubCategoryId = 5L,
                            Title = "Nontoxic multinodular goiter"
                        },
                        new
                        {
                            Id = 20L,
                            Code = "E04.8",
                            DiagnosisSubCategoryId = 5L,
                            Title = "Other specified nontoxic goiter"
                        },
                        new
                        {
                            Id = 21L,
                            Code = "E04.9",
                            DiagnosisSubCategoryId = 5L,
                            Title = "Nontoxic goiter, unspecified"
                        },
                        new
                        {
                            Id = 22L,
                            Code = "E05.0",
                            DiagnosisSubCategoryId = 6L,
                            Title = "Thyrotoxicosis with diffuse goiter"
                        },
                        new
                        {
                            Id = 23L,
                            Code = "E05.1",
                            DiagnosisSubCategoryId = 6L,
                            Title = "Thyrotoxicosis with toxic single thyroid nodule"
                        },
                        new
                        {
                            Id = 24L,
                            Code = "E05.2",
                            DiagnosisSubCategoryId = 6L,
                            Title = "Thyrotoxicosis with toxic multinodular goiter"
                        },
                        new
                        {
                            Id = 25L,
                            Code = "E05.3",
                            DiagnosisSubCategoryId = 6L,
                            Title = "Thyrotoxicosis from ectopic thyroid tissue"
                        },
                        new
                        {
                            Id = 26L,
                            Code = "E05.4",
                            DiagnosisSubCategoryId = 6L,
                            Title = "Thyrotoxicosis factitia"
                        },
                        new
                        {
                            Id = 27L,
                            Code = "E05.8",
                            DiagnosisSubCategoryId = 6L,
                            Title = "Other thyrotoxicosis"
                        },
                        new
                        {
                            Id = 28L,
                            Code = "E05.9",
                            DiagnosisSubCategoryId = 6L,
                            Title = "Thyrotoxicosis, unspecified"
                        },
                        new
                        {
                            Id = 29L,
                            Code = "E06.0",
                            DiagnosisSubCategoryId = 7L,
                            Title = "Acute thyroiditis"
                        },
                        new
                        {
                            Id = 30L,
                            Code = "E06.1",
                            DiagnosisSubCategoryId = 7L,
                            Title = "Subacute thyroiditis"
                        },
                        new
                        {
                            Id = 31L,
                            Code = "E06.2",
                            DiagnosisSubCategoryId = 7L,
                            Title = "Chronic thyroiditis with transient thyrotoxicosis"
                        },
                        new
                        {
                            Id = 32L,
                            Code = "E06.3",
                            DiagnosisSubCategoryId = 7L,
                            Title = "Autoimmune thyroiditis"
                        },
                        new
                        {
                            Id = 33L,
                            Code = "E06.4",
                            DiagnosisSubCategoryId = 7L,
                            Title = "Drug - induced thyroiditis"
                        },
                        new
                        {
                            Id = 34L,
                            Code = "E06.5",
                            DiagnosisSubCategoryId = 7L,
                            Title = "Other chronic thyroiditis"
                        },
                        new
                        {
                            Id = 35L,
                            Code = "E06.9",
                            DiagnosisSubCategoryId = 7L,
                            Title = "Thyroiditis, unspecified"
                        },
                        new
                        {
                            Id = 36L,
                            Code = "E07.0",
                            DiagnosisSubCategoryId = 8L,
                            Title = "Hypersecretion of calcitonin"
                        },
                        new
                        {
                            Id = 37L,
                            Code = "E07.1",
                            DiagnosisSubCategoryId = 8L,
                            Title = "Dyshormogenetic goiter"
                        },
                        new
                        {
                            Id = 38L,
                            Code = "E07.8",
                            DiagnosisSubCategoryId = 8L,
                            Title = "Other specified disorders of thyroid"
                        },
                        new
                        {
                            Id = 39L,
                            Code = "E07.9",
                            DiagnosisSubCategoryId = 8L,
                            Title = "Disorder of thyroid, unspecified"
                        });
                });

            modelBuilder.Entity("Infra.Clinic.Entity.DiagnosisMainCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CombinedField")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("[Code] +' : '+[Category]");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Row_Version");

                    b.HasKey("Id");

                    b.ToTable("DiagnosisMainCategory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Category = "Disorders of thyroid gland",
                            Code = "E00 - E07"
                        },
                        new
                        {
                            Id = 2L,
                            Category = "Diabetes mellitus",
                            Code = "E08 - E13"
                        },
                        new
                        {
                            Id = 3L,
                            Category = "Other disorders of glucose regulation and pancreatic internal secretion",
                            Code = "E15 - E16"
                        },
                        new
                        {
                            Id = 4L,
                            Category = "Disorders of other endocrine glands",
                            Code = "E20-E35"
                        },
                        new
                        {
                            Id = 5L,
                            Category = "Intraoperative complications of endocrine system",
                            Code = "E36-E36.8"
                        },
                        new
                        {
                            Id = 6L,
                            Category = "Malnutrition",
                            Code = "E40-E46"
                        },
                        new
                        {
                            Id = 7L,
                            Category = "Other nutritional deficiencies",
                            Code = "E50-E64"
                        },
                        new
                        {
                            Id = 8L,
                            Category = "Overweight, obesity and other hyperalimentation",
                            Code = "E65-E68"
                        },
                        new
                        {
                            Id = 9L,
                            Category = "Metabolic disorders",
                            Code = "E70-E88"
                        },
                        new
                        {
                            Id = 10L,
                            Category = "Postprocedural endocrine and metabolic complications and disorders, not elsewhere classified",
                            Code = "E89-E89.89"
                        });
                });

            modelBuilder.Entity("Infra.Clinic.Entity.DiagnosisSubCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CombinedField")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("[Code] +' : '+[Category]");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("DiagnosisMainCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Row_Version");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisMainCategoryId");

                    b.ToTable("DiagnosisSubCategory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Category = "Congenital iodine - deficiency syndrome",
                            Code = "E00",
                            DiagnosisMainCategoryId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Category = "Iodine - deficiency related thyroid disorders and allied conditions",
                            Code = "E01",
                            DiagnosisMainCategoryId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            Category = "Subclinical iodine - deficiency hypothyroidism",
                            Code = "E02",
                            DiagnosisMainCategoryId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            Category = "Other hypothyroidism",
                            Code = "E03",
                            DiagnosisMainCategoryId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            Category = "Other nontoxic goiter",
                            Code = "E04",
                            DiagnosisMainCategoryId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            Category = "Thyrotoxicosis[hyperthyroidism]",
                            Code = "E05",
                            DiagnosisMainCategoryId = 1L
                        },
                        new
                        {
                            Id = 7L,
                            Category = "Thyroiditis",
                            Code = "E06",
                            DiagnosisMainCategoryId = 1L
                        },
                        new
                        {
                            Id = 8L,
                            Category = "Other disorders of thyroid",
                            Code = "E07",
                            DiagnosisMainCategoryId = 1L
                        });
                });

            modelBuilder.Entity("Infra.Clinic.Entity.DiscountLookup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Agency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("DiscountPercentage")
                        .HasColumnType("float");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Row_Version");

                    b.HasKey("Id");

                    b.ToTable("Discounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Agency = "nkabt mohndsen",
                            DiscountPercentage = 25.0
                        },
                        new
                        {
                            Id = 2L,
                            Agency = "nkabt atba2",
                            DiscountPercentage = 20.0
                        },
                        new
                        {
                            Id = 3L,
                            Agency = "nkabt siadla",
                            DiscountPercentage = 20.0
                        });
                });

            modelBuilder.Entity("Infra.Clinic.Entity.FollowUp", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PatientID")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Row_Version");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientID");

                    b.ToTable("FollowUp", (string)null);
                });

            modelBuilder.Entity("Infra.Clinic.Entity.InsuranceCompany", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Row_Version");

                    b.HasKey("Id");

                    b.ToTable("InsuranceCompany", (string)null);
                });

            modelBuilder.Entity("Infra.Clinic.Entity.Patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthdDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Cash")
                        .HasColumnType("bit");

                    b.Property<string>("CompositeName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("[FirstName] +' -' +[MiddleName] +','+ [FamilyName]");

                    b.Property<bool>("Consultation")
                        .HasColumnType("bit");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FamilyHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<int>("InsuranceCompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("InsuranceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PastHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Row_Version");

                    b.HasKey("Id");

                    b.ToTable("Patient", (string)null);
                });

            modelBuilder.Entity("Infra.Clinic.Entity.PhysicalHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("BMI")
                        .HasColumnType("float");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PatientID")
                        .HasColumnType("bigint");

                    b.Property<double>("RBS")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Row_Version");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PatientID");

                    b.ToTable("PhysicalHistory", (string)null);
                });

            modelBuilder.Entity("Infra.Clinic.Entity.Treatment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PatientID")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Row_Version");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientID");

                    b.ToTable("Treatment", (string)null);
                });

            modelBuilder.Entity("Infra.Clinic.Entity.TreatmentLookup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ActiveIngridient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DosagePerDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Row_Version");

                    b.HasKey("Id");

                    b.ToTable("TreatmentLookUp", (string)null);
                });

            modelBuilder.Entity("Infra.Clinic.Entity.TreatmentProductionName", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Row_Version");

                    b.Property<long>("TreatmentLookupId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentLookupId");

                    b.ToTable("TreatmentProductionName", (string)null);
                });

            modelBuilder.Entity("Infra.Clinic.Entity.Visit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Consultation")
                        .HasColumnType("bit");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Row_Version");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("fees")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("Infra.Clinic.Entity.Diagnosis", b =>
                {
                    b.HasOne("Infra.Clinic.Entity.Patient", "Patient")
                        .WithMany("LstDiagnosis")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Infra.Clinic.Entity.DiagnosisLeafNodes", b =>
                {
                    b.HasOne("Infra.Clinic.Entity.DiagnosisSubCategory", "DiagnosisSubCategory")
                        .WithMany("DiagnosisLeaf")
                        .HasForeignKey("DiagnosisSubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiagnosisSubCategory");
                });

            modelBuilder.Entity("Infra.Clinic.Entity.DiagnosisSubCategory", b =>
                {
                    b.HasOne("Infra.Clinic.Entity.DiagnosisMainCategory", "DiagnosisMainCategory")
                        .WithMany("DiagnosisSubs")
                        .HasForeignKey("DiagnosisMainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiagnosisMainCategory");
                });

            modelBuilder.Entity("Infra.Clinic.Entity.FollowUp", b =>
                {
                    b.HasOne("Infra.Clinic.Entity.Patient", "Patient")
                        .WithMany("LstFollowUp")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Infra.Clinic.Entity.PhysicalHistory", b =>
                {
                    b.HasOne("Infra.Clinic.Entity.Patient", "Patient")
                        .WithMany("LstPhysicalHistory")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Infra.Clinic.Entity.Treatment", b =>
                {
                    b.HasOne("Infra.Clinic.Entity.Patient", "Patient")
                        .WithMany("LstTreatment")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Infra.Clinic.Entity.TreatmentProductionName", b =>
                {
                    b.HasOne("Infra.Clinic.Entity.TreatmentLookup", "TreatmentLookup")
                        .WithMany("treatmentProductionName")
                        .HasForeignKey("TreatmentLookupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreatmentLookup");
                });

            modelBuilder.Entity("Infra.Clinic.Entity.Visit", b =>
                {
                    b.HasOne("Infra.Clinic.Entity.Patient", "Patient")
                        .WithMany("LstVisits")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Infra.Clinic.Entity.DiagnosisMainCategory", b =>
                {
                    b.Navigation("DiagnosisSubs");
                });

            modelBuilder.Entity("Infra.Clinic.Entity.DiagnosisSubCategory", b =>
                {
                    b.Navigation("DiagnosisLeaf");
                });

            modelBuilder.Entity("Infra.Clinic.Entity.Patient", b =>
                {
                    b.Navigation("LstDiagnosis");

                    b.Navigation("LstFollowUp");

                    b.Navigation("LstPhysicalHistory");

                    b.Navigation("LstTreatment");

                    b.Navigation("LstVisits");
                });

            modelBuilder.Entity("Infra.Clinic.Entity.TreatmentLookup", b =>
                {
                    b.Navigation("treatmentProductionName");
                });
#pragma warning restore 612, 618
        }
    }
}
